//
//  HomeViewController.m
//  Belled
//
//  Created by Bellnet on 14-4-18.
//  Copyright (c) 2014年 Bellnet. All rights reserved.
//

#import "LightConViewController.h"

@interface LightConViewController ()

@end

@implementation LightConViewController

{
    AsyncUdpSocket *clientSocket;
    EFCircularSlider *colorRGB;
    EFCircularSlider *brightness;
    NSMutableArray *valueRGB;
    UIPickerView *selectEffect;
    RSCameraRotator *rotator;
    RSCameraRotator *colorSwitch;
    NSString *model;
    NSString *modelc;
    NSString *red;
    NSString *green;
    NSString *blue;
    NSString *lighting;
    NSString *iswitch;
    MBProgressHUD *HUD;
    NSTimer *myTimer;                       //定时器
    //LCVoiceHud *lcvHud;                     //麦克风
    
    LCVoice * voice;
    AVAudioPlayer           *player;
    NSString                *nameFile;      //文件名
    NSString                *mp3Path;       //mp3文件路径
    NSString                *wavPath;       //wav文件路径
    
    NSString                *sTime;         //开始录制时间
    NSString                *SSSTime;       //时间流
    BOOL                    isRes;          //录制状态   YES是录制状态
    
    NSMutableString         *cmdLight;      //录制的灯空指令
    NSMutableString         *pcmdLight;     //本地用的录制的灯空指令格式
    
    long long               firsttime;      //上次时间
    
    UIButton                *speaker;       //录音按钮
    UIButton                *speakerstop;   //录音停止按钮
    NSMutableArray          *ledcmd;        //录音回放的控制指令
}

@synthesize  sn,model,contrlType,wanip;
@synthesize  selectEffect,switchslider,stopBtn;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    [self.view insertSubview:_colorRGBr atIndex:1];
    
    firsttime = 0;
    
    //clientSocket = [[AsyncUdpSocket alloc] initWithDelegate:self];
    
    isRes = NO;
    
    iswitch = [[NSString alloc] initWithFormat:@"%@",@"0"];
    model = [[NSString alloc] initWithFormat:@"%@",@"8"];
    modelc= [[NSString alloc] initWithFormat:@"%@",@"8"];
    red= [[NSString alloc] initWithFormat:@"%@",@"0"];
    green= [[NSString alloc] initWithFormat:@"%@",@"0"];
    blue= [[NSString alloc] initWithFormat:@"%@",@"0"];
    lighting= [[NSString alloc] initWithFormat:@"%@",@"100"];
    
    //cmdLight = [[NSMutableString alloc] init];
    //pcmdLight = [[NSMutableString alloc] init];
    
    //初始化录音vc
    //voice = [[LCVoice alloc]init];
    
    //初始化播放器
    //player = [[AVAudioPlayer alloc]init];
    
    UIBarButtonItem *cButton = [[UIBarButtonItem alloc] initWithTitle:@"Back"
                                                                style:UIBarButtonItemStyleBordered
                                                               target:self
                                                               action:@selector(doClickedBack)];
    self.navigationItem.leftBarButtonItem = cButton;
    
    [Tools hideTabBar:self.tabBarController];
    
    self.navigationItem.title = [NSString stringWithFormat:@"%@",sn];
    
    //彩色盘
    CGRect sliderFrame = CGRectMake(35, 70, 250, 250);
    colorRGB = [[EFCircularSlider alloc] initWithFrame:sliderFrame];
    colorRGB.minimumValue = 1;
    colorRGB.maximumValue = 360;
    colorRGB.lineWidth = 0;

    colorRGB.unfilledColor = [[UIColor alloc] initWithRed:9/255.0f green:136/255.0f blue:201/255.0f alpha:1.0f];
    colorRGB.filledColor = [[UIColor alloc] initWithRed:9/255.0f green:136/255.0f blue:201/255.0f alpha:1.0f];
    colorRGB.handleType = nullBigCircle;
    //colorRGB.handleType = nullCircle;
    colorRGB.handleColor = [[UIColor alloc] initWithRed:255/255.0f green:255/255.0f blue:255/255.0f alpha:1.0f];
    //[self.view addSubview:colorRGB];
    
    [colorRGB addTarget:self action:@selector(updateLightColorRGB:) forControlEvents:UIControlEventValueChanged];
    
    
    //关灯图片
    speaker = [[UIButton alloc] initWithFrame:CGRectMake(104, 136, 110, 110)];
    [speaker setBackgroundImage:[UIImage imageNamed:@"off@2x.png"] forState:UIControlStateNormal];
    [self.view insertSubview:speaker atIndex:99];
    
    //开灯图片
    speakerstop = [[UIButton alloc] initWithFrame:CGRectMake(104, 136, 110, 110)];
    [speakerstop setBackgroundImage:[UIImage imageNamed:@"on@2x.png"] forState:UIControlStateNormal];
    
    //开关按钮绑定操作
    /*UILongPressGestureRecognizer *longPrees = [[UILongPressGestureRecognizer alloc]initWithTarget:self action:@selector(recordBtnLongPressed:)];
    longPrees.delegate = self;
    [speaker addGestureRecognizer:longPrees];*/
    
    [speaker addTarget:self action:@selector(sendButtonPressedOnLight) forControlEvents:UIControlEventTouchDown];
    
    [speakerstop addTarget:self action:@selector(sendButtonPressedOffLight) forControlEvents:UIControlEventTouchDown];
    
    [switchslider addTarget:self action:@selector(updateBrightness) forControlEvents:UIControlEventValueChanged];
    
    HUD = [[MBProgressHUD alloc] initWithView:self.view];
    [self.view addSubview:HUD];

}

- (void)switchChanged:(UISwitch *)sender
{
    // Otherwise do:
    if (sender.on) {
        NSLog(@"back button selected");
        [self sendButtonPressedOnLight];
    } else {
        NSLog(@"front button selected");
        [self sendButtonPressedOffLight];
    }

}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


-(NSString *)NSString2Json:(int)value
{
    NSMutableDictionary *device = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *snLight = [[NSMutableDictionary alloc] init];
    snLight = [[NSMutableDictionary alloc] initWithObjectsAndKeys:sn,@"sn",nil];
    NSArray *arraysnLight = [[NSArray alloc] initWithObjects:snLight,nil];
    
    switch (value) {
        case 1:
            //封装mutableDictionary
            device = [[NSMutableDictionary alloc] initWithObjectsAndKeys:arraysnLight,@"sn_list",@"5",@"model",model,@"effect",@"0",@"matchValue",red,@"r",green,@"g",blue,@"b",lighting,@"bright",iswitch,@"iswitch",@"light_ctrl",@"cmd",nil];
            break;
            
        case 2:
            //封装mutableDictionary
            device = [[NSMutableDictionary alloc] initWithObjectsAndKeys:arraysnLight,@"sn_list",@"5",@"model",model,@"effect",@"0",@"matchValue",@"0",@"r",@"0",@"g",@"0",@"b",lighting,@"bright",iswitch,@"iswitch",@"light_ctrl",@"cmd",nil];
            break;
            
        default:
            //封装mutableDictionary
            device = [[NSMutableDictionary alloc] initWithObjectsAndKeys:arraysnLight,@"sn_list",@"5",@"model",model,@"effect",@"0",@"matchValue",red,@"r",green,@"g",blue,@"b",lighting,@"bright",iswitch,@"iswitch",@"light_ctrl",@"cmd",nil];
            break;
    }
    

    NSString *data = [[[SBJsonWriter alloc] init] stringWithObject:device];
    return data;
  
}

-(void)NSStringFormt
{

    //封装mutableDictionary
    NSString *data = [[NSString alloc] initWithFormat:@"%@,%@:%@:%@,%@",iswitch,red,green,blue,lighting];
    
    GlobalSet *gt = [GlobalSet bellSetting];
    gt.alarmLight = data;
    gt.alarmLight_switch = iswitch;
    gt.alarmLight_red = red;
    gt.alarmLight_green = green;
    gt.alarmLight_blue = blue;
    gt.alarmLight_bright = lighting;
    
}

- (void)sendButtonPressedOnLight
{
    //[self connect];
    NSLog(@"发送开灯");
    [speaker removeFromSuperview];
    [self.view insertSubview:speakerstop atIndex:98];
    iswitch = @"1";
    
    if([contrlType isEqualToString:@"1"] || [contrlType isEqualToString:@"2"]){
        NSString *message = [[NSString alloc] initWithFormat:@"%@",[self NSString2Json:1]];
        [self sendSearchBroadcast:message tag:1];
        [message release];
    }else{
        [self NSStringFormt];
    }
}

- (void)sendButtonPressedOffLight
{
    //[self connect];
    NSLog(@"发送关灯");
    [speakerstop removeFromSuperview];
    [self.view insertSubview:speaker atIndex:99];
    iswitch = @"0";
    if([contrlType isEqualToString:@"1"] || [contrlType isEqualToString:@"2"]){
        NSString *message = [[NSString alloc] initWithFormat:@"%@",[self NSString2Json:1]];
        [self sendSearchBroadcast:message tag:2];
        [message release];
    }else{
        [self NSStringFormt];
    }
    
}


//控制杆调节
- (void)updateBrightness
{
    NSString *message;
    
    float brighta = switchslider.value;

    lighting = [[NSString alloc] initWithFormat:@"%.0f",brighta];
    
    if([contrlType isEqualToString:@"1"] || [contrlType isEqualToString:@"2"]){
        if([model isEqualToString:@"8"]){
            message = [[NSString alloc] initWithFormat:@"%@",[self NSString2Json:2]];
        }else{
            message = [[NSString alloc] initWithFormat:@"%@",[self NSString2Json:1]];
        }
    [self sendSearchBroadcast:message tag:1];
    [message release];
    }else{
        [self NSStringFormt];
    }
}

//灯的颜色
- (void)updateLightColorRGB:(id)sender
{
   
    UIColor *myColorHue = [[UIColor alloc] initWithHue:colorRGB.currentValue/360 saturation:1.0 brightness:1.0 alpha:1.0];

    const CGFloat *components = CGColorGetComponents(myColorHue.CGColor);
    red = [[NSString alloc] initWithFormat:@"%.0f",components[0]*255];
    green = [[NSString alloc] initWithFormat:@"%.0f",components[1]*255];
    blue = [[NSString alloc] initWithFormat:@"%.0f",components[2]*255];
    
    if([contrlType isEqualToString:@"1"] || [contrlType isEqualToString:@"2"]){
        NSString *message = [[NSString alloc] initWithFormat:@"%@",[self NSString2Json:1]];
        [self sendSearchBroadcast:message tag:1];
        [message release];
    }else{
        [self NSStringFormt];
    }
}

- (void)connectHost:(NSString *)ip port:(NSUInteger)port
{
    if (![clientSocket isConnected])
    {

        
        NSError *errors = nil;
        [clientSocket connectToHost:ip onPort:port error:&errors];
        
        if (errors)
        {
            NSLog(@"connectToHost error %@",errors);
  
        }else{
            
            NSLog(@"connectToHost success");
            
        }

    }
}

+ (UIColor *)colorWithARGBHex:(UInt32)hex
{
    int b = hex & 0x000000FF;
    int g = ((hex & 0x0000FF00) >> 8);
    int r = ((hex & 0x00FF0000) >> 16);
    int a = ((hex & 0xFF000000) >> 24);
    
    return [UIColor colorWithRed:r / 255.0f
                           green:g / 255.0f
                            blue:b / 255.0f
                           alpha:a / 255.f];
}

//pickerView
- (void)connect
{
    NSLog(@"ip,port : %@ : %d",UDP_IP,UDP_PORT);
    [self connectHost:UDP_IP port:UDP_PORT];
}

- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSUInteger)row forComponent:(NSUInteger)component; {
	NSMutableArray *strings = [NSMutableArray arrayWithCapacity:9];
    [strings addObject:@"Gray"];
	[strings addObject:@"More colors randomly"];
	[strings addObject:@"Flashing color"];
	[strings addObject:@"RGB colors"];
	[strings addObject:@"Red color"];
	[strings addObject:@"Blue color"];
    [strings addObject:@"Green color"];
    [strings addObject:@"White"];
    [strings addObject:@"Color"];
	return [strings objectAtIndex:(row%9)];
}


- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSUInteger)row inComponent:(NSUInteger)component {
	[self pickerViewLoaded:nil];
    model = [[NSString alloc] initWithFormat:@"%d",row+1];
    if([model isEqualToString:@"1"] || [model isEqualToString:@"2"] || [model isEqualToString:@"4"] || [model isEqualToString:@"5"] || [model isEqualToString:@"6"] || [model isEqualToString:@"7"] || [model isEqualToString:@"8"]){
        [colorRGB removeFromSuperview];
    }else{
        //[self.view addSubview:colorRGB];
        [self.view insertSubview:colorRGB atIndex:3];
    }
   
    NSString *message = [[NSString alloc] initWithFormat:@"%@",[self NSString2Json:1]];
    NSLog(@"message: %@", message);
    //NSData *cmdData = [message dataUsingEncoding:NSUTF8StringEncoding];
    //NSLog(@"cmdData : %@",cmdData);
    
    //组接灯控指令
    //[self saveLightCMD];
    [self sendSearchBroadcast:message tag:1];
    //[clientSocket sendData:cmdData toHost:UDP_IP port:UDP_PORT withTimeout:-1 tag:1];

}

- (NSUInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSUInteger)component {
	return 9;
}


-(void)pickerViewLoaded: (id)blah {
	//NSUInteger max = 9;
	//NSUInteger base10 = (max/2)-(max/2)%9;
	//[selectEffect selectRow:[selectEffect selectedRowInComponent:0]%9+base10 inComponent:0 animated:false];
}


- (NSUInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {
	return 1;
}

#pragma mark - 长按录音
- (void)recordBtnLongPressed:(UILongPressGestureRecognizer*) longPressedRecognizer{
    //长按开始
    if(longPressedRecognizer.state == UIGestureRecognizerStateBegan) {
        
        [self recordStart];
        NSLog(@"recordStart");
    }//长按结束
    else if(longPressedRecognizer.state == UIGestureRecognizerStateEnded){

    }
}

//开始录音
-(void) recordStart
{
    isRes = YES;
    
    [speaker removeFromSuperview];
    [self.view insertSubview:speakerstop atIndex:98];

    
    [stopBtn setTitle:@"Stop" forState:UIControlStateNormal];
    sTime = [[NSString alloc] initWithFormat:@"%@",[Tools getTimeSp]];
    
    ledcmd = [[NSMutableArray alloc]init];
    
    nameFile = [self getCurrentTimeString];
    
    mp3Path = [[NSString alloc] initWithFormat:@"%@/Documents/%@.mp3", NSHomeDirectory(),nameFile];
    
    wavPath = [[NSString alloc] initWithFormat:@"%@/Documents/%@.wav", NSHomeDirectory(),nameFile];
    
    [voice startRecordWithPath:[NSString stringWithFormat:@"%@", wavPath]];

    
}

//停止录音
-(IBAction) recordEnd
{
    isRes = NO;
    
    [speakerstop removeFromSuperview];
    [self.view insertSubview:speaker atIndex:99];
    
    //[HUD show:YES];
    [stopBtn setTitle:@"Sent" forState:UIControlStateNormal];
    [voice stopRecordWithCompletionBlock:^{}];

}

//取消录音
-(IBAction) recordCancel
{
    [voice cancelled];
    
    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:nil message:@"取消了" delegate:nil cancelButtonTitle:@"ok" otherButtonTitles:nil, nil];
    [alert show];
    [alert release];
    
}

//播放
-(IBAction) play
{
    
    player = [player initWithContentsOfURL:[NSURL URLWithString:wavPath] error:nil];
    NSString *size =[NSString stringWithFormat:@"%d", [self getFileSize:wavPath]/1024];
    //NSLog(@"ledcmd : %@",ledcmd);
    [player play];
    [self playcmdlight];
    NSLog(@"wav play size:%@ KB",size);
    
}

-(void)playcmdlight
{
    int counts = [ledcmd count];
    
    NSLog(@"ledcmd : %@", ledcmd);
    NSLog(@"ledcmd count:%d",[ledcmd count]);
    
    if(counts >0){
    for (int i = 0; i < counts; i++) {
        NSString *s1 = [NSString stringWithFormat:@"%@",[ledcmd objectAtIndex: i]];
        
        NSArray *a1 = [s1 componentsSeparatedByString:@"|"];
        
        NSString *m1 = [NSString stringWithFormat:@"%lld",[[a1 objectAtIndex: 0]longLongValue]/1000];
        NSString *m2 = [NSString stringWithFormat:@"%@",[a1 objectAtIndex: 1]];
        
        [NSTimer scheduledTimerWithTimeInterval:[m1 longLongValue] target:self selector:@selector(sendUDP:) userInfo:m2 repeats:NO];
        NSLog(@"playCMD time|cmd:%@|%@",m1,m2);
    }
    }
}

//保存灯控和声音的匹配
-(void)saveLightCMD
{
    if(isRes){
        long long sTimessp = [sTime longLongValue];
        
        NSString *nowTime = [[NSString alloc] initWithFormat:@"%@",[Tools getTimeSp]];
        
        long long nowTimessp = [nowTime longLongValue];
        
        long long ssssecond = nowTimessp - sTimessp;
        
        NSString *sssecond = [[NSString alloc] initWithFormat:@"%lld",ssssecond ];
        
        //NSString *hhmmss = [[NSString alloc] initWithFormat:@"%@",[self corTimehhmmss:sssecond]];

        NSString *msg =[[NSString alloc] initWithFormat:@"%@=%@\r\n",sssecond,[self NSString2Json:1]];
        
        NSString *msg2 =[[NSString alloc] initWithFormat:@"%@|%@;",sssecond,[self NSString2Json:1]];
        
        [cmdLight insertString:msg atIndex:[cmdLight length]];
        
        [ledcmd addObject:msg2];
        //NSLog(@"saveLightCMD2 : %@", cmdLight);
    }
}

//发送数据到服务器
- (void)sendFiles{
    
    [NetWorkHttp httpPost:@"soundupfile" Postdata:cmdLight Files:mp3Path];
    cmdLight = [[NSMutableString alloc]initWithString:@""];
    
}

- (void)sendUDP:(NSString *)msg
{
    NSLog(@"sendUDP");
    NSData *cmdData = [[msg userInfo] dataUsingEncoding:NSUTF8StringEncoding];
    NSLog(@"message : %@",[msg userInfo]);
    [clientSocket sendData:cmdData toHost:UDP_IP port:UDP_PORT withTimeout:-1 tag:1];
}

- (void)sendtest
{
    NSLog(@"sendtest");
}

#pragma mark - 获取文件大小
- (NSInteger) getFileSize:(NSString*) path{
    NSFileManager * filemanager = [[[NSFileManager alloc]init] autorelease];
    if([filemanager fileExistsAtPath:path]){
        NSDictionary * attributes = [filemanager attributesOfItemAtPath:path error:nil];
        NSNumber *theFileSize;
        if ( (theFileSize = [attributes objectForKey:NSFileSize]) )
            return  [theFileSize intValue];
        else
            return -1;
    }
    else{
        return -1;
    }
}

/**
 生成当前时间字符串
 @returns 当前时间字符串
 */
- (NSString *)getCurrentTimeString
{
    NSDateFormatter *dateformat=[[[NSDateFormatter  alloc]init]autorelease];
    [dateformat setDateFormat:@"yyyyMMddHHmmss"];
    return [dateformat stringFromDate:[NSDate date]];
}

/**
 生成当前时间字符串
 @returns 当前时间字符串
 */
- (NSString *)getTimeString
{
    NSDateFormatter *dateformat=[[[NSDateFormatter  alloc]init]autorelease];
    [dateformat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    return [dateformat stringFromDate:[NSDate date]];
}

- (NSString *)getTimemiaoString
{
    NSDateFormatter *dateformat=[[[NSDateFormatter  alloc]init]autorelease];
    [dateformat setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    return [dateformat stringFromDate:[NSDate date]];
}

//秒转hhmmss
- (NSString *)corTimehhmmss:(NSString *)intime
{
    long long intimelong = [intime longLongValue];
    
    long long hh = floor(intimelong/3600);
    
    long long mm = floor(intimelong%3600/60);
    
    long long ss = intimelong%3600%60;
    NSLog(@"hh:%02lld  mm:%02lld  ss:%02lld",hh,mm,ss);
    
    NSString *hhmmmss = [[NSString alloc] initWithFormat:@"%02lld:%02lld:%02lld",hh,mm,ss];
    return hhmmmss;
}


-(void) doClickedBack
{
    //tabbar显示
    [Tools showTabBar:self.tabBarController];
    [self.navigationController popViewControllerAnimated:YES];
    //NSLog(@"showTabBar");
    if([contrlType isEqualToString:@"3"]){
        [[NSNotificationCenter defaultCenter] postNotificationName:@"reRoadAlarmLight" object:self];
    }
}

-(void)sendSearchBroadcast:(NSString*) msg tag:(long)tag{
    //NSString* bchost = @"192.168.3.83"; //这里发送广播
    //int BCPORT = 11600;
    [self sendToUDPServer:msg address:wanip port:UDP_PORT tag:tag];
}

-(void)sendToUDPServer:(NSString*) msg address:(NSString*)address port:(int)port tag:(long)tag{
    AsyncUdpSocket *udpSocket=[[[AsyncUdpSocket alloc]initWithDelegate:self]autorelease]; //得到udp util
    NSLog(@"address:%@,port:%d,msg:%@",address,port,msg);
    //receiveWithTimeout is necessary or you won't receive anything
    [udpSocket receiveWithTimeout:10 tag:2]; //设置超时10秒
    [udpSocket enableBroadcast:YES error:nil]; //如果你发送广播，这里必须先enableBroadcast
    NSData *data=[msg dataUsingEncoding:NSUTF8StringEncoding];
    [udpSocket sendData:data toHost:address port:port withTimeout:10 tag:tag]; //发送udp
    [udpSocket close];
}

//下面是发送的相关回调函数
-(BOOL)onUdpSocket:(AsyncUdpSocket *)sock didReceiveData:(NSData *)data withTag:(long)tag fromHost:(NSString *)host port:(UInt16)port{
    NSString* rData= [[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]autorelease];
    NSLog(@"onUdpSocket:didReceiveData:---%@",rData);
    return YES;
}
/*-(void)onUdpSocket:(AsyncUdpSocket *)sock didNotSendDataWithTag:(long)tag dueToError:(NSError *)error{
    NSLog(@"didNotSendDataWithTag----%ld---%@",tag,error);
}
-(void)onUdpSocket:(AsyncUdpSocket *)sock didNotReceiveDataWithTag:(long)tag dueToError:(NSError *)error{
    NSLog(@"didNotReceiveDataWithTag----%ld---%@",tag,error);
}
-(void)onUdpSocket:(AsyncUdpSocket *)sock didSendDataWithTag:(long)tag{
    NSLog(@"didSendDataWithTag----%ld",tag);
}
-(void)onUdpSocketDidClose:(AsyncUdpSocket *)sock{
    NSLog(@"onUdpSocketDidClose----");
}*/


@end
